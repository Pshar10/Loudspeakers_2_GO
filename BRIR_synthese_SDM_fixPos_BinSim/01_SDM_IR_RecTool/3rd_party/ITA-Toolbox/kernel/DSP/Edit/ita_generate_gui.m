function varargout = ita_generate_gui()
%ITA_GENERATE_GUI - Generates GUI for ita_generate function
%
% Syntax: out = ita_generate_gui()
%
% Autor: Alexandra Craciun -- Email: Alexandra.Craciun@rwth-aachen.de
% Created:  06-Mai-2009

% <ITA-Toolbox>
% This file is part of the ITA-Toolbox. Some rights reserved. 
% You can find the license for this m-file in the license.txt file in the ITA-Toolbox folder. 
% </ITA-Toolbox>

%%
mpos = get(0,'Monitor');
output       = [];
top_margin   = 25;
hor_space_s  =  5;
height       = top_margin + 60 + 5*(hor_space_s + 15);
width        = 1020;
w_position = (mpos(1,length(mpos)-1)/2)-(width/2);
h_position = (mpos(1,length(mpos))/2)-(height/2);

MainPosition = [w_position h_position width height];
Signal = struct('Type','','Amplitude',1,'Tau',[],'Frequency',1000,'Phi',[],'samplingRate',ita_preferences('samplingRate'),'FFTDegree',ita_preferences('fftDegree'),'OptPhaseInfo',[]);

    hMainFigure = figure( ...       % the main GUI figure
        'MenuBar','none', ...
        'Toolbar','none', ...
        'HandleVisibility','on', ...
        'Name', 'ITA Generate', ...
        'NumberTitle','off', ...
        'Position' , MainPosition, ...
        'Color', [0.8 0.8 0.8]);

figSet.hMainFigure = hMainFigure;

% Signal Type
uicontrol(...
    'Parent', hMainFigure,...
    'Position',[10 120 100 30],...
    'HorizontalAlignment','center',...
    'String','Signal Type',...
    'Style', 'text',...
    'ForegroundColor', [0 0 .7],...
    'BackgroundColor', [0.8 0.8 0.8]);
hSignalType = uicontrol(...
    'Parent', figSet.hMainFigure,...
    'Position', [10 100 100 30],...
    'HorizontalAlignment','right',...
    'String', [Signal.Type,['|ComplexExp|EmptyDat|Impulse|DiffImp|Sine|Cosine|AMtone|FMtone|Whitenoise|Pinknoise|Flatnoise|'...
    'Flat|ccxSweep|LinSweep|ExpSweep|complextone']],...
    'Style', 'popup',...
    'BackgroundColor', [1 1 1],...
    'Callback', @UpdateSignalType_txt);

% Amplitude
uicontrol(...
    'Parent', hMainFigure,...
    'Position',[130 120 100 30],...
    'HorizontalAlignment','center',...
    'String','Amplitude',...
    'Style', 'text',...
    'ForegroundColor', [0 0 .7],...
    'BackgroundColor', [0.8 0.8 0.8]);
hAmplitude = uicontrol(...
    'Parent', figSet.hMainFigure,...
    'Position', [130 110 100 20],...
    'HorizontalAlignment','right',...
    'String',Signal.Amplitude,...
    'Style', 'edit',...
    'BackgroundColor', [1 1 1]);

% Tau
hTau_bar = uicontrol(...
    'Parent', hMainFigure,...
    'Position',[260 120 100 30],...
    'HorizontalAlignment','center',...
    'String','Tau',...
    'Style', 'text',...
    'ForegroundColor', [0 0 .7],...
    'BackgroundColor', [0.8 0.8 0.8]);
hTau = uicontrol(...
    'Parent', figSet.hMainFigure,...
    'Position', [260 110 100 20],...
    'HorizontalAlignment','right',...
    'String',Signal.Tau,...
    'Style', 'edit',...
    'BackgroundColor', [1 1 1]);

% Frequency
hFrequency_bar = uicontrol(...
    'Parent', hMainFigure,...
    'Position',[390 120 100 30],...
    'HorizontalAlignment','center',...
    'String','Frequency',...
    'Style', 'text',...
    'ForegroundColor', [0 0 .7],...
    'BackgroundColor', [0.8 0.8 0.8]);
hFrequency = uicontrol(...
    'Parent', figSet.hMainFigure,...
    'Position', [390 110 100 20],...
    'HorizontalAlignment','right',...
    'String',Signal.Frequency,...
    'Style', 'edit',...
    'BackgroundColor', [1 1 1]);

% Phi
hPhi_bar = uicontrol(...
    'Parent', hMainFigure,...
    'Position',[520 120 100 30],...
    'HorizontalAlignment','center',...
    'String','Phi',...
    'Style', 'text',...
    'ForegroundColor', [0 0 .7],...
    'BackgroundColor', [0.8 0.8 0.8]);
hPhi = uicontrol(...
    'Parent', figSet.hMainFigure,...
    'Position', [520 110 100 20],...
    'HorizontalAlignment','right',...
    'String',Signal.Phi,...
    'Style', 'edit',...
    'Value',0,...
    'BackgroundColor', [1 1 1]);

% Sampling Rate
uicontrol(...
    'Parent', hMainFigure,...
    'Position',[650 120 100 30],...
    'HorizontalAlignment','center',...
    'String','Sampling Rate',...
    'Style', 'text',...
    'ForegroundColor', [0 0 .7],...
    'BackgroundColor', [0.8 0.8 0.8]);
hSamplingRate = uicontrol(...
    'Parent', figSet.hMainFigure,...
    'Position', [650 110 100 20],...
    'HorizontalAlignment','right',...
    'String',Signal.samplingRate,...
    'Style', 'edit',...
    'BackgroundColor', [1 1 1]);

% FFT Degree
uicontrol(...
    'Parent', hMainFigure,...
    'Position',[780 120 100 30],...
    'HorizontalAlignment','center',...
    'String','FFT Degree',...
    'Style', 'text',...
    'ForegroundColor', [0 0 .7],...
    'BackgroundColor', [0.8 0.8 0.8]);
hFFTDegree = uicontrol(...
    'Parent', figSet.hMainFigure,...
    'Position', [780 110 100 20],...
    'HorizontalAlignment','right',...
    'String',Signal.FFTDegree,...
    'Style', 'edit',...
    'BackgroundColor', [1 1 1]);

% Optional Phase Info
hOptPhaseInfo_bar = uicontrol(...
    'Parent', hMainFigure,...
    'Position',[910 120 100 30],...
    'HorizontalAlignment','center',...
    'String','Optional Phase Info',...
    'Style', 'text',...
    'ForegroundColor', [0 0 .7],...
    'BackgroundColor', [0.8 0.8 0.8]);
hOptPhaseInfo = uicontrol(...
    'Parent', figSet.hMainFigure,...
    'Position', [910 110 100 20],...
    'HorizontalAlignment','right',...
    'String',Signal.OptPhaseInfo,...
    'Style', 'edit',...
    'BackgroundColor', [1 1 1]);

% Cancel Button
uicontrol(...
    'Parent', hMainFigure, ...
    'Position',[570 40 80 30],...
    'String', 'Cancel',...
    'Style', 'pushbutton',...
    'Callback', @CancelButtonCallback);

% Ok Button
uicontrol(...
    'Parent', hMainFigure, ...
    'Position',[680 40 80 30],...
    'String', 'OK',...
    'Style', 'pushbutton',...
    'Callback', @OkayButtonCallback);

% Preview Button
uicontrol(...
    'Parent', hMainFigure, ...
    'Position',[790 40 80 30],...
    'String', 'Preview',...
    'Style', 'pushbutton',...
    'Callback', @PreviewButtonCallback);

%% ita toolbox logo
a_im = importdata(which('ita_toolbox_logo.jpg'));
image(a_im);axis off
set(gca,'Units','pixel', 'Position', [100 30 350 65]);

%% Output
uiwait(gcf)
if nargout == 1
    varargout{1} = output;
end

if nargout < 1
    ita_setinbase('ans',output)
end

%% Setting the buttons
    function UpdateSignalType_txt(hObject, eventdata) %#ok<INUSD>
        type_idx = get(hSignalType,'Value');
        all_types = get(hSignalType,'String');
        type = all_types(type_idx,:);
        type = type(type~=' ');% delete spaces in string
        % For each different signal type, changes the existent fields
        % accordingly
        set(hSignalType,'Enable','on');
        set(hAmplitude,'Enable','on');
        set(hTau,'Enable','on');
        set(hFrequency,'Enable','on');
        set(hPhi,'Enable','on');
        set(hSamplingRate,'Enable','on');
        set(hFFTDegree,'Enable','on');
        set(hOptPhaseInfo,'Enable','on');
        set(hTau_bar,'String','Tau');
        set(hFrequency_bar,'String','Frequency');
        set(hPhi_bar,'String','Phi');
        switch lower(type)
            case 'complexexp'
                set(hOptPhaseInfo,'Enable','off');
            case 'emptydat'
                set(hAmplitude,'Enable','off');
                set(hTau,'Enable','off');
                set(hFrequency,'Enable','off');
                set(hPhi,'Enable','off');
                set(hOptPhaseInfo,'Enable','off');
            case {'impulse','diffimp'}
                set(hTau,'Enable','off');
                set(hFrequency,'Enable','off');
                set(hPhi,'Enable','off');
                set(hOptPhaseInfo,'Enable','off');
            case {'sine'}
                set(hTau,'Enable','off');
                set(hPhi,'Enable','off');
                set(hOptPhaseInfo_bar,'String','Period');
            case {'cosine'}
                set(hTau,'Enable','off');
                set(hPhi,'Enable','off');
                set(hOptPhaseInfo,'Enable','off');
            case {'amtone'}
                set(hOptPhaseInfo,'Enable','off');
                set(hTau_bar,'String','ModDegree');
                set(hPhi_bar,'String','ModFreq');
            case {'fmtone'}
                set(hOptPhaseInfo,'Enable','off');
                set(hTau_bar,'String','ModIndex');
                set(hFrequency_bar,'String','CenterFreq');
                set(hPhi_bar,'String','ModFreq');
            case {'noise','whitenoise','pinknoise','flatnoise','flat','mls'}
                set(hTau,'Enable','off');
                set(hFrequency,'Enable','off');
                set(hPhi,'Enable','off');
                set(hOptPhaseInfo,'Enable','off');
            case 'ccxsweep'
                set(hAmplitude,'Enable','off');
                set(hFrequency,'Enable','off');
                set(hOptPhaseInfo,'Enable','off');
                set(hTau_bar,'String','Start Frequency');
                set(hPhi_bar,'String','End Frequency');
            case {'sweep','linsweep','logsweep','expsweep'}
                set(hAmplitude,'Enable','off');
                set(hOptPhaseInfo,'Enable','off');
                set(hTau_bar,'String','F0');
                set(hFrequency_bar,'String','F1');
                set(hPhi_bar,'String','Stop Margin');
            case {'complextone'}
                set(hTau,'Enable','off');
                set(hPhi,'Enable','off');
        end
    end

    function OkayButtonCallback(hObject, eventdata) %#ok<INUSD>
        
        type_idx    = get(hSignalType,'Value');
        all_types   = get(hSignalType,'String');
        type        = all_types(type_idx,:);
        type        = type(type~=' ');% delete spaces in string
        if strcmpi(get(hAmplitude,'Enable'),'on')
            a = str2double(get(hAmplitude,'String'));
        end
        if strcmpi(get(hTau,'Enable'),'on')
            tau = str2double(get(hTau,'String'));
        end
        if strcmpi(get(hFrequency,'Enable'),'on')
            freq = str2double(get(hFrequency,'String'));
        end
        if strcmpi(get(hPhi,'Enable'),'on')
            phi = str2double(get(hPhi,'String'));
        end
        if strcmpi(get(hSamplingRate,'Enable'),'on')
            sr = str2double(get(hSamplingRate,'String'));
        end
        if strcmpi(get(hFFTDegree,'Enable'),'on')
            fft_deg = str2double(get(hFFTDegree,'String'));
        end
        if strcmpi(get(hOptPhaseInfo,'Enable'),'on')
            opt_ph_info = get(hOptPhaseInfo,'String');
        end
        
        empty_field = 0;
        if strcmpi(get(hTau,'Enable'),'on')
            if isnan(tau)
                empty_field = 1;
            end
        end
        if strcmpi(get(hPhi,'Enable'),'on')
            if isnan(tau)
                empty_field = 1;
            end
        end
        if empty_field
            warndlg('Field left empty! Nothing to be done in here!', 'ita_generate GUI');
            return
        end
        
        switch lower(type)
            case 'complexexp'
                output = ita_generate('complexexp',a,tau,freq,phi,sr,fft_deg);
            case 'emptydat'
                output = ita_generate('emptydat',sr,fft_deg);
            case 'impulse'
                output = ita_generate('impulse',a,sr,fft_deg);
            case 'diffimp'
                output = ita_generate('diffimp',a,sr,fft_deg);
            case 'sine'
                if strcmpi(opt_ph_info,'fullperiod')
                    output = ita_generate('sine',a,freq,sr,fft_deg,opt_ph_info);
                else
                    output = ita_generate('sine',a,freq,sr,fft_deg);
                end
            case 'cosine'
                output = ita_generate('cosine',a,freq,sr,fft_deg);
            case 'amtone'
                mod_deg = tau;
                mod_freq = phi;
                output = ita_generate('amtone',a,freq,mod_deg,mod_freq,sr,fft_deg);
            case 'fmtone'
                mod_index = tau;
                center_freq = freq;
                mod_freq = phi;
                output = ita_generate('fmtone',a,center_freq,mod_freq,mod_index,sr,fft_deg);
            case {'noise','whitenoise'}
                output = ita_generate('noise',a,sr,fft_deg);
            case 'pinknoise'
                output = ita_generate('pinknoise',a,sr,fft_deg);
            case 'flatnoise'
                output = ita_generate('flatnoise',a,sr,fft_deg);
            case 'flat'
                output = ita_generate('flat',a,sr,fft_deg);
            case 'mls'
                output = ita_generate('mls',a,sr,fft_deg);
            case 'ccxsweep'
                f_start = tau;
                f_end = phi;
                output = ita_generate('ccxsweep',[f_start f_end],sr,fft_deg);
            case {'sweep','linsweep'}
                f0 = tau;
                f1 = freq;
                stop_margin = phi;
                if ~isnan(stop_margin)
                    output = ita_generate('sweep',f0,f1,stop_margin,sr,fft_deg);
                else
                    output = ita_generate('sweep',f0,f1,sr,fft_deg);
                end
            case {'logsweep','expsweep'}
                f0 = tau;
                f1 = freq;
                stop_margin = phi;
                if ~isnan(stop_margin)
                    output = ita_generate('logsweep',f0,f1,stop_margin,sr,fft_deg);
                else
                    output = ita_generate('logsweep',f0,f1,sr,fft_deg);
                end
            case 'complextone'
                if ~isnan(opt_ph_info)
                    output = ita_generate('complextone',a,freq,sr,fft_deg,opt_ph_info);
                else
                    output = ita_generate('complextone',a,freq,sr,fft_deg);
                end
            otherwise
                warndlg('Field left empty! Nothing to be done in here!', 'ita_generate GUI');
                
                
                %                 hFig = figure('Name','Error Window',...
                %                     'Position',[300 550 250 100],...
                %                     'MenuBar','none', ...
                %                     'Toolbar','none', ...
                %                     'HandleVisibility','on',...
                %                     'NumberTitle','off', ...
                %                     'Color', [0.8 0.8 0.8]);
                %                 uicontrol(...
                %                     'Parent', hFig,...
                %                     'Position',[5 40 250 30],...
                %                     'HorizontalAlignment','center',...
                %                     'String','Field left empty! Nothing to be done in here!',...
                %                     'Style', 'text',...
                %                     'ForegroundColor', [0 0 .7],...
                %                     'BackgroundColor', [0.8 0.8 0.8]);
                %                 uicontrol(...
                %                     'Parent', hFig,...
                %                     'Position',[90 10 80 30],...
                %                     'HorizontalAlignment','center',...
                %                     'String','Ok',...
                %                     'Style', 'pushbutton',...
                %                     'BackgroundColor', [0.8 0.8 0.8],...
                %                     'Callback', @OkButtonCallback);
                return;
        end
                
        uiresume(hMainFigure);
        close(hMainFigure)
        return;
    end
    function CancelButtonCallback(hObject, eventdata) %#ok<INUSD>
        uiresume(gcf);
        close all
        return;
    end
% Ok Button for Error Message
    function OkButtonCallback(hObject, eventdata) %#ok<INUSD>
        uiresume(gcf);
        close gcf
        return;
    end
    function PreviewButtonCallback(hObject, eventdata) %#ok<INUSD>
        type_idx    = get(hSignalType,'Value');
        all_types   = get(hSignalType,'String');
        type        = all_types(type_idx,:);
        type        = type(type~=' ');% delete spaces in string
        if strcmpi(get(hAmplitude,'Enable'),'on')
            a = str2double(get(hAmplitude,'String'));
        end
        if strcmpi(get(hTau,'Enable'),'on')
            tau = str2double(get(hTau,'String'));
        end
        if strcmpi(get(hFrequency,'Enable'),'on')
            freq = str2double(get(hFrequency,'String'));
        end
        if strcmpi(get(hPhi,'Enable'),'on')
            phi = str2double(get(hPhi,'String'));
        end
        if strcmpi(get(hSamplingRate,'Enable'),'on')
            sr = str2double(get(hSamplingRate,'String'));
        end
        if strcmpi(get(hFFTDegree,'Enable'),'on')
            fft_deg = str2double(get(hFFTDegree,'String'));
        end
        if strcmpi(get(hOptPhaseInfo,'Enable'),'on')
            opt_ph_info = get(hOptPhaseInfo,'String');
        end
        
        switch lower(type)
            case 'complexexp'
                output = ita_generate('complexexp',a,tau,freq,phi,sr,fft_deg);
            case 'emptydat'
                output = ita_generate('emptydat',sr,fft_deg);
            case 'impulse'
                output = ita_generate('impulse',a,sr,fft_deg);
            case 'diffimpulse'
                output = ita_generate('diffimpulse',a,sr,fft_deg);
            case 'sine'
                if strcmpi(opt_ph_info,'fullperiod')
                    output = ita_generate('sine',a,freq,sr,fft_deg,opt_ph_info);
                else
                    output = ita_generate('sine',a,freq,sr,fft_deg);
                end
            case 'cosine'
                output = ita_generate('cosine',a,freq,sr,fft_deg);
            case 'amtone'
                mod_deg = tau;
                mod_freq = phi;
                output = ita_generate('amtone',a,freq,mod_deg,mod_freq,sr,fft_deg);
            case 'fmtone'
                mod_index = tau;
                center_freq = freq;
                mod_freq = phi;
                output = ita_generate('fmtone',a,center_freq,mod_freq,mod_index,sr,fft_deg);
            case {'noise','whitenoise'}
                output = ita_generate('noise',a,sr,fft_deg);
            case 'pinknoise'
                output = ita_generate('pinknoise',a,sr,fft_deg);
            case 'flatnoise'
                output = ita_generate('flatnoise',a,sr,fft_deg);
            case 'flat'
                output = ita_generate('flat',a,sr,fft_deg);
            case 'mls'
                output = ita_generate('mls',a,sr,fft_deg);
            case 'ccxsweep'
                f_start = tau;
                f_end = phi;
                output = ita_generate('ccxsweep',[f_start f_end],sr,fft_deg);
            case {'sweep','linsweep'}
                f0 = tau;
                f1 = freq;
                stop_margin = phi;
                if ~isnan(stop_margin)
                    output = ita_generate('sweep',f0,f1,stop_margin,sr,fft_deg);
                else
                    output = ita_generate('sweep',f0,f1,sr,fft_deg);
                end
            case {'logsweep','expsweep'}
                f0 = tau;
                f1 = freq;
                stop_margin = phi;
                if ~isnan(stop_margin)
                    output = ita_generate('logsweep',f0,f1,stop_margin,sr,fft_deg);
                else
                    output = ita_generate('logsweep',f0,f1,sr,fft_deg);
                end
            case 'complextone'
                if ~isnan(opt_ph_info)
                    output = ita_generate('complextone',a,freq,sr,fft_deg,opt_ph_info);
                else
                    output = ita_generate('complextone',a,freq,sr,fft_deg);
                end
            otherwise
                hFig = figure('Name','Error Window',...
                    'Position',[300 550 250 100],...
                    'MenuBar','none', ...
                    'Toolbar','none', ...
                    'HandleVisibility','on',...
                    'NumberTitle','off', ...
                    'Color', [0.8 0.8 0.8]);
                uicontrol(...
                    'Parent', hFig,...
                    'Position',[5 40 250 30],...
                    'HorizontalAlignment','center',...
                    'String','Field left empty! Nothing to be done in here!',...
                    'Style', 'text',...
                    'ForegroundColor', [0 0 .7],...
                    'BackgroundColor', [0.8 0.8 0.8]);
                uicontrol(...
                    'Parent', hFig,...
                    'Position',[90 10 80 30],...
                    'HorizontalAlignment','center',...
                    'String','Ok',...
                    'Style', 'pushbutton',...
                    'BackgroundColor', [0.8 0.8 0.8],...
                    'Callback', @OkButtonCallback);
                return;
        end
        empty_field = 0;
        if strcmpi(get(hTau,'Enable'),'on')
            if isnan(tau)
                empty_field = 1;
            end
        end
        if strcmpi(get(hPhi,'Enable'),'on')
            if isnan(tau)
                empty_field = 1;
            end
        end
        if empty_field
            hFig = figure('Name','Error Window',...
                'Position',[300 550 250 100],...
                'MenuBar','none', ...
                'Toolbar','none', ...
                'HandleVisibility','on',...
                'NumberTitle','off', ...
                'Color', [0.8 0.8 0.8]);
            uicontrol(...
                'Parent', hFig,...
                'Position',[5 40 250 30],...
                'HorizontalAlignment','center',...
                'String','Field left empty! Nothing to be done in here!',...
                'Style', 'text',...
                'ForegroundColor', [0 0 .7],...
                'BackgroundColor', [0.8 0.8 0.8]);
            uicontrol(...
                'Parent', hFig,...
                'Position',[90 10 80 30],...
                'HorizontalAlignment','center',...
                'String','Ok',...
                'Style', 'pushbutton',...
                'BackgroundColor', [0.8 0.8 0.8],...
                'Callback', @OkButtonCallback);
        else
            figure;
            ita_plot_all(output,'figure_handle',gcf);
        end
    end

end
