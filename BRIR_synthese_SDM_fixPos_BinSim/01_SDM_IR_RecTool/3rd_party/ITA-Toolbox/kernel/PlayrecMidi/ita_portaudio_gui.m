function varargout = ita_portaudio_gui
%ITA_PORTAUDIO_GUI - Generates GUI for ita_portaudio function
%
% Syntax:  ita_turntable_gui()
%
% Autor: Alexandra Craciun -- Email: Alexandra.Craciun@rwth-aachen.de
% Created:  28-Mai-2009
% Modified: 03-Jun-2009 - craciun - Refresh button added, sampling rate
% option, number of samples/seconds

% <ITA-Toolbox>
% This file is part of the ITA-Toolbox. Some rights reserved.
% You can find the license for this m-file in the license.txt file in the ITA-Toolbox folder.
% </ITA-Toolbox>


%% Initialization
top_margin   = 25;
hor_space_s  = 5;
height       = top_margin + 5*(hor_space_s + 30);
left_margin  = 10;
width        = 900;
width_button = 150;
last_col = width-width_button-left_margin;
center_col = (width-width_button)/2;
MainPosition = [100 500 width height];
variable = [];
list_of_var = evalin('base','whos'); % list of workspace variables
list = '';
for idx  = 1:numel(list_of_var)
    if strcmpi(list_of_var(idx).class,'itaAudio') %Display only itaAudios, we cant play the rest
        list = [list list_of_var(idx).name '|'];
    end
end
list = list(1:numel(list)-1);
in_ch = 1;
out_ch = 1;

[playDeviceName, playDeviceInfo] = ita_portaudio_deviceID2string(ita_preferences('recDeviceID'));
defaultsamplingrate = playDeviceInfo.defaultSampleRate;
%% Main Figure
persistent hMainFigure
if isempty(hMainFigure) || ~ishandle(hMainFigure)
    hMainFigure = figure( ...       % the main GUI figure
        'MenuBar','none', ...
        'Toolbar','none', ...
        'HandleVisibility','on', ...
        'Name', 'PortAudio', ...
        'NumberTitle','off', ...
        'Position' , MainPosition, ...
        'Color', [0.8 0.8 0.8]);
elseif isappdata(hMainFigure,'Title')
    hMainFigure = figure( ...       % the main GUI figure
        'MenuBar','none', ...
        'Toolbar','none', ...
        'HandleVisibility','on', ...
        'Name', 'PortAudio', ...
        'NumberTitle','off', ...
        'Position' , MainPosition, ...
        'Color', [0.8 0.8 0.8]);
else
    clf(hMainFigure)
end
figSet.hMainFigure = hMainFigure;
%% Buttons
% list of variables
uicontrol(...
    'Parent', hMainFigure,...
    'Position', [left_margin height-40 width_button 30],...
    'String','List of Variables',...
    'Style', 'text',...
    'HorizontalAlignment','center',...
    'ForegroundColor', [0 0 .7],...
    'BackgroundColor', [0.8 0.8 0.8]);

hVar = uicontrol(...
    'Parent', hMainFigure,...
    'Position', [left_margin height-60 width_button 30],...
    'String',[variable,list],...
    'Style', 'popup',...
    'ForegroundColor', [0 0 .7],...
    'BackgroundColor', [1 1 1],...
    'Enable','on',...
    'Callback',@RefreshButtonCallback,...
    'ButtonDownFcn',@RefreshButtonCallback);

% refresh button
uicontrol(...
    'Parent', hMainFigure,...
    'Position', [left_margin height-110 width_button 30],...
    'String','Refresh',...
    'Style', 'pushbutton',...
    'ForegroundColor', [0 0 .7],...
    'BackgroundColor', [0.8 0.8 0.8],...
    'Callback',@RefreshButtonCallback);


% option for record - number of samples/seconds
hOption = uicontrol(...
    'Parent', hMainFigure,...
    'Position', [center_col-30-width_button height-60 width_button 30],...
    'String','number of samples|seconds',...
    'Style', 'popup',...
    'Value', 1,...
    'ForegroundColor', [0 0 .7],...
    'BackgroundColor', [1 1 1]);

% number of samples
uicontrol(...
    'Parent', hMainFigure,...
    'Position', [center_col height-30 width_button 30],...
    'String','Number of Samples/Seconds',...
    'Style', 'text',...
    'HorizontalAlignment','center',...
    'ForegroundColor', [0 0 .7],...
    'BackgroundColor', [0.8 0.8 0.8]);

hSamples = uicontrol(...
    'Parent', hMainFigure,...
    'Position', [center_col height-50 width_button 20],...
    'Style', 'edit',...
    'String', '1024',...
    'ForegroundColor', [0 0 .7],...
    'BackgroundColor', [1 1 1]);

% sampling rate
uicontrol(...
    'Parent', hMainFigure,...
    'Position', [center_col+30+width_button height-40 width_button 30],...
    'String','Sampling Rate',...
    'Style', 'text',...
    'HorizontalAlignment','center',...
    'ForegroundColor', [0 0 .7],...
    'BackgroundColor', [0.8 0.8 0.8]);

hSamplingRate = uicontrol(...
    'Parent', hMainFigure,...
    'Position', [center_col+30+width_button height-50 width_button 20],...
    'Style', 'edit',...
    'String', int2str(defaultsamplingrate),...
    'ForegroundColor', [0 0 .7],...
    'BackgroundColor', [1 1 1]);

% save name
uicontrol(...
    'Parent', hMainFigure,...
    'Position', [last_col height-40 width_button 30],...
    'String','Save Name',...
    'Style', 'text',...
    'HorizontalAlignment','center',...
    'ForegroundColor', [0 0 .7],...
    'BackgroundColor', [0.8 0.8 0.8]);

hName = uicontrol(...
    'Parent', hMainFigure,...
    'Position', [last_col height-50 width_button 20],...
    'Style', 'edit',...
    'ForegroundColor', [0 0 .7],...
    'BackgroundColor', [1 1 1]);

% play button
uicontrol(...
    'Parent', hMainFigure,...
    'Position', [center_col-30-width_button height-110 width_button 30],...
    'String','Play',...
    'Style', 'pushbutton',...
    'ForegroundColor', [0 0 .7],...
    'BackgroundColor', [0.8 0.8 0.8],...
    'Callback',@PlayButtonCallback);

% play & record button
uicontrol(...
    'Parent', hMainFigure,...
    'Position', [center_col height-110 width_button 30],...
    'String','Play+Rec',...
    'Style', 'pushbutton',...
    'ForegroundColor', [0 0 .7],...
    'BackgroundColor', [0.8 0.8 0.8],...
    'Callback',@PlayRecButtonCallback);

% record button
uicontrol(...
    'Parent', hMainFigure,...
    'Position', [center_col+30+width_button height-110 width_button 30],...
    'String','Rec',...
    'Style', 'pushbutton',...
    'ForegroundColor', [0 0 .7],...
    'BackgroundColor', [0.8 0.8 0.8],...
    'Callback',@RecButtonCallback);

% select channel button
uicontrol(...
    'Parent', hMainFigure,...
    'Position', [left_margin height-180 width_button 30],...
    'String','Select Channel',...
    'Style', 'pushbutton',...
    'ForegroundColor', [0 0 .7],...
    'BackgroundColor', [0.8 0.8 0.8],...
    'Callback',@SelChannelButtonCallback);

% set prefrences button
uicontrol(...
    'Parent', hMainFigure,...
    'Position', [last_col height-180 width_button 30],...
    'String','Preferences',...
    'Style', 'pushbutton',...
    'ForegroundColor', [0 0 .7],...
    'BackgroundColor', [0.8 0.8 0.8],...
    'Callback',@PreferencesButtonCallback);

%% ita toolbox logo
a_im = importdata('ita_toolbox_logo.jpg');
image(a_im);axis off
set(gca,'Units','pixel', 'Position', [130 height-195 350 65]);

%% Callback functions
    function RefreshButtonCallback(hObject,eventdata)
        list_of_var = evalin('base','whos'); % list of workspace variables
        list = '';
        for idx  = 1:numel(list_of_var) %#ok<*FXUP>
            if strcmpi(list_of_var(idx).class,'itaAudio') %Display only itaAudios, we cant play the rest
                list = [list list_of_var(idx).name '|'];
            end
        end
        list = list(1:numel(list)-1);
        set(hVar,'String',[variable,list]);
    end

    function PlayButtonCallback(hObject,eventdata) %#ok<INUSD>
        var_idx = get(hVar,'Value');
        all_var = get(hVar,'String');
        var = all_var(var_idx,:);
        var = var(var~=' ');% delete spaces in string
        var = evalin('base' ,var);
        if ~isempty(out_ch)
            ita_portaudio(var,'OutputChannels',out_ch);
        else
            ita_portaudio(var);
        end
    end

    function PlayRecButtonCallback(hObject,eventdata) %#ok<INUSD>
        var_idx = get(hVar,'Value');
        all_var = get(hVar,'String');
        var = all_var(var_idx,:);
        var = var(var~=' ');% delete spaces in string
        var = evalin('base' ,var);
        s_rate = str2double(get(hSamplingRate,'String'));
        if isempty(in_ch) && isempty(out_ch)
            if ~isnan(s_rate)
                out = ita_portaudio(var,'samplingRate',s_rate);
            else
                out = ita_portaudio(var);
            end
        elseif ~isempty(in_ch) && isempty(out_ch)
            if ~isnan(s_rate)
                out = ita_portaudio(var,'InputChannels',in_ch,'samplingRate',s_rate);
            else
                out = ita_portaudio(var,'InputChannels',in_ch);
            end
        elseif isempty(in_ch) && ~isempty(out_ch)
            if ~isnan(s_rate)
                out = ita_portaudio(var,'OutputChannels',out_ch,'samplingRate',s_rate);
            else
                out = ita_portaudio(var,'OutputChannels',out_ch);
            end
        else
            if ~isnan(s_rate)
                out = ita_portaudio(var,'InputChannels',in_ch,'OutputChannels',out_ch,'samplingRate',s_rate);
            else
                out = ita_portaudio(var,'InputChannels',in_ch,'OutputChannels',out_ch);
            end
        end
        savevarname = get(hName,'String');
        if isempty(savevarname)
            savevarname = 'ans';
        end
        assignin('base',savevarname,out);
    end

    function RecButtonCallback(hObject,eventdata) %#ok<INUSD>
        option_idx = get(hOption,'Value');
        all_options = get(hOption,'String');
        option = all_options(option_idx,:);
        option = option(option~=' ');% delete spaces in string
        switch option
            case 'numberofsamples'
                n_samples = str2double(get(hSamples,'String'));
            case 'seconds'
                n_samples = str2double(get(hSamples,'String'))*str2double(get(hSamplingRate,'String'));
        end
        s_rate = str2double(get(hSamplingRate,'String'));
        if ~isempty(in_ch)
            if ~isnan(s_rate)
                out = ita_portaudio(n_samples,'InputChannels',in_ch,'samplingRate',s_rate);
            else
                out = ita_portaudio(n_samples,'InputChannels',in_ch);
            end
        else
            if ~isnan(s_rate)
                out = ita_portaudio(n_samples,'samplingRate',s_rate);
            else
                out = ita_portaudio(n_samples);
            end
        end
        savevarname = get(hName,'String');
        if isempty(savevarname)
            savevarname = 'ans';
        end
        ita_setinbase(savevarname,out);
    end
    function SelChannelButtonCallback(hObject,eventdata) %#ok<INUSD>
        [in_ch out_ch] = ita_channelselect_gui(in_ch, out_ch);
    end

    function PreferencesButtonCallback(hObject,eventdata) %#ok<INUSD>
        ita_preferences();
    end

end % end function